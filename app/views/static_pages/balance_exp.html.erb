<h1> Transaction History </h1>

<style>
#nav_chart {
        background-color: #EEE;
}
</style>

<div id="nav_chart"></div>

<hr />
<p>Broker: <%= @transactions.first.broker %>
<p>INITIAL DEPOSIT: <%= cash_balance = 0.0 %> || INITIAL NAV UNITS: <%= nav_units = 1000.00 %></p>

<hr />

<table>
  <tr>
    <th>Group</th>
    <th>User</th>
<!--     <th>Trade</th> TradeNumber is blank!-->
    <th>Ticker</th><!-- rename Stock Symbol to ticker -->
    <th>Trade date</th>
<!--     <th>Settle date</th> not needed-->
    <th>Shares</th>
    <th>Book Price</th>
    <th>Close Price</th>
    <th>Commission</th>
<!--    <th>Fees</th> not needed-->
<!--     <th>Interest</th> not needed -->
    <th>Cost</th>
    <th>Action</th>
    <th>Description</th>
<!--    <th>Broker</th> don't need -->
	<th>Cash Balance</th>
    <th>Stock Balance (Book)</th>
    <th>Stock Balance (Market)</th>
    <th>Account Balance (Book)</th>
    <th>Account Balance (Market)</th>
	<th>NAV UNITS</th>
	<th>NAV per Unit</th>
	<th>Net Asset Value</th>
    <th>NAV Return</th>
    <th>Transaction Return</th>
<!--     <th></th>
    <th></th>
    <th></th> -->
  </tr>


  <% stock_value = 0.0 %>
  <% eod_value = 0.0 %>
  <% book_acc = 0.0 %>
  <% mrkt_acc = 0.0 %>
  <% initial_nav_per_unit = 0.0 %>
  <% transaction_return = 0 %>
  <% total_transactions = @transactions.count %>
  <% nav_per_unit_array = [] %>
  <% nav_dates = [] %>
  <% nav_calc = [] %>

<% @transactions.each_with_index do |transaction, index| %>
  <tr>
    <td><%= transaction.group.name %></td><!-- show group name -->

<!--     <td><%#= transaction.user_id %></td> switch to display username-->
	<td><%= User.find_by_id(transaction.user_id).username %></td>

<!--     <td><%#= transaction.trade_id %></td> -->

<!-- stock symbol -->
    <td><%= transaction.stock_symbol %></td>

<!-- create an array of date hashes :date => date -->
    <% nav_dates << {:date => transaction.trade_date} %>

<!-- show the trade execution date -->
    <td><%= transaction.trade_date %></td>

<!--     <td><%#= transaction.settle_date %></td> -->

<!-- show the trade quantity -->
    <td><%= transaction.quantity %></td>

<!-- show the trade price per stock -->
    <td><%= transaction.price %></td>

<!-- this is a dummy calculation for the market stock price, it should take the end of the day market prices stored in a DB -->
    <% dum_market = transaction.price * 2.00 %>
    <td><%= number_with_precision(dum_market, :precision => 2, :delimiter => ',')%></td>

<!-- display the commission -->
    <td><%= transaction.commission %></td>

<!--     <td><%#= transaction.fees %></td> -->
<!--     <td><%#= transaction.interest %></td> -->

<!-- total cost of the trade -->
    <td><%= number_with_delimiter(transaction.total_value, :precision => 2, :delimiter => ',') %></td>

<!-- display the action type of the trade -->
    <td><%= transaction.action_type %></td>

<!-- display the trade description -->
    <td><%= transaction.description %></td>

<!--     <td><%#= transaction.broker %></td> -->

<!-- calculate the cash balance(starts at 0) by adding the transaction.total_value -->
	<% cash_balance += transaction.total_value %>
	<td><%= number_with_precision(cash_balance, :precision => 2, :delimiter => ',') %></td>

<!-- Book Value for Stocks -->
    <% if transaction.action_type == 'Buy' %>
        <!-- if the transaction action is a Buy, then add the trade total value to stock value because that is how much money has been paid for the stock -->
        <!-- eventually a position table should be created to track buy quantitys -->
        <% stock_value += transaction.total_value.abs %>
        <!-- then display the stock value -->
        <td><%= number_with_precision(stock_value, :precision => 2, :delimiter => ',') %></td>
    <% elsif transaction.action_type == 'Sell' %>
        <!-- if the transaction action is a Sell, then subtract the original value of the stock (book value) -->
        <!-- set book_price to be the original price of the bought stock, currently this function finds all transactions with Buy and then searches for the current transactions stock_symbol and pulls the price. -->
        <!-- book_price will need to instead look up a position table to find the price -->
        <% book_price = @transactions.where(:action_type => 'Buy').find_by_stock_symbol(transaction.stock_symbol).price %>
        <!-- the stock value is subtracted by the original book_price per share multiplied by the quantity of shares purchased (in absolute value because Scottrade lists it as negative) -->
        <% stock_value -= (book_price * transaction.quantity.abs) #need to be original price %> 
        <!-- display the stock_value -->
        <td><%= number_with_precision(stock_value, :precision => 2, :delimiter => ',') %></td>
    <% else %>
        <!-- if the action is not a buy or sell, then just display the stock_value, because stock_value is not being directly changed -->
        <!-- currently does not update if the transaction is not a buy or sell -->
        <td><%= number_with_precision(stock_value, :precision => 2, :delimiter => ',') %></td>
    <% end %>

<!-- Market Value for Stocks --> 
<!-- Market Value is similar to Book Value, except the prices used are the eod (end of day) prices -->
    <% if transaction.action_type == 'Buy' %>
        <!-- takes the end of the day market price after buying the stock and revises the stock_value balance to eod market prices -->
        <% eod_transaction = (transaction.quantity * dum_market) + transaction.commission.abs %>
        <% eod_value += eod_transaction %>
        <td><%= number_with_precision(eod_value, :precision => 2, :delimiter => ',') %></td>
    <% elsif transaction.action_type == 'Sell' %>
        <!-- when you sell the stock, it takes the book price and subtracts it from the calculated eod_value -->
        <% book_price = @transactions.where(:action_type => 'Buy').find_by_stock_symbol(transaction.stock_symbol).price %>
        <% eod_value -= (book_price * transaction.quantity.abs) %> 
        <td><%= number_with_precision(eod_value, :precision => 2, :delimiter => ',') %></td>
    <% else %>
        <!-- if there is no change then display the eod_value -->
        <!-- currently does not update if the transaction is not a buy or sell -->
        <td><%= number_with_precision(eod_value, :precision => 2, :delimiter => ',') %></td>
    <% end %>

<!-- book total acc balance -->
        <% book_acc = cash_balance + stock_value %>
    <td><%= number_with_precision(book_acc, :precision => 2, :delimiter => ',') %></td>

<!-- market total acc balance -->
        <% mrkt_acc = cash_balance + eod_value %>
    <td><%= number_with_precision(mrkt_acc, :precision => 2, :delimiter => ',') %></td>

<!-- nav units w/ market value (eod data)-->
<!-- if the transaction.description is a 'PAYMENT ON ACCOUNT', then calculate the nav_units, this is a WITHDRAWL, nav units will be adjusted -->
    <% if transaction.description == 'PAYMENT ON ACCOUNT' %>
        <% nav_units = nav_units - ( (-transaction.total_value) / ((cash_balance + eod_value - transaction.total_value) / nav_units) ) %>
        <td><%= number_with_precision(nav_units, :precision => 2, :delimiter => ',') %></td>
    <% elsif transaction.description == 'DEPOSIT CKS' && index != 0 %>
<!-- if the transaction.description is a 'DEPOSIT CKS' and it is NOT the first transaction, then this is a DEPOSIT, nav units will be adjusted -->
        <% nav_units = nav_units + ( (transaction.total_value) / ((cash_balance + eod_value - transaction.total_value) / nav_units) ) %>
        <td><%= number_with_precision(nav_units, :precision => 2, :delimiter => ',') %></td>
    <% else %>
<!-- otherwise just display the nav_units, there is no change if there is no DEPOSIT or WITHDRAWL -->
        <td><%= number_with_precision(nav_units, :precision => 2, :delimiter => ',') %></td>
    <% end %>

<!-- calculate nav_per_unit, this is taken by vidied the mrket_acc (market account balance) / nav_units -->
    <% nav_per_unit = mrkt_acc / nav_units %>
<!-- push the nav_per_unit into an array, to keep track and reference later -->
    <% nav_per_unit_array << nav_per_unit %>
<!-- display the nav_per_unit -->
	<td><%= number_with_precision(nav_per_unit, :precision => 2, :delimiter => ',') %></td><!-- nav per unit-->
<!-- calculate the actual net asset value (nav), this is nav_units * nav_per_unit -->
    <% nav = nav_units * nav_per_unit %>
<!-- the net asset value is pushed into a nav_calc array -->
    <% nav_calc << {:nav => nav } %>
<!-- display net asset value -->
	<td><%= number_with_precision(nav, :precision => 2, :delimiter => ',') %></td><!-- net asset value -->

<!-- if the index is 0, set the intitial nav_per_unit to that first nav_per_unit-->
    <% if index == 0 %>
        <% initial_nav_per_unit = nav_per_unit %>
    <% end %>

<!-- calculate the net asset value return -->
    <% return_nav = ((nav_per_unit - initial_nav_per_unit) / initial_nav_per_unit) * 100 %>
<!-- display the nav return -->
    <td><%= number_with_precision(return_nav, :precision => 2) %>%</td>

<!-- if the index is greater than 0, calculate the return per transaction -->
    <% if index > 0 %>
        <% trans_return = (nav_per_unit_array[index] - nav_per_unit_array[index-1]) / nav_per_unit_array[index-1] * 100 %>
    <% else %>
<!-- if the index is less than zero, set the return to 0, because its the first line and no return can be calculated -->
        <% trans_return = 0.0 %>
    <% end %>
<!-- display the transaction return -->
    <td><%= number_with_precision(trans_return, :precision => 2) %>%</td>
  </tr>
<% end %>
</table>

<hr />

<!-- create a new_array to feed into morris.js -->
<% new_array = [] %>
<!-- goes through the nav_dates array of hashes and at the same time goes through the nav_calc array of hashes and shovels it into new_array -->
<% nav_dates.each_with_index do |date, index| %>
    <% new_array << {:date => nav_dates[index][:date], :nav => nav_calc[index][:nav]} %>
<% end %>

<!-- find the length of new_array -->
<% new_array_count = new_array.count %>

<!-- embed the array into the Morris javascript -->
<script type="text/javascript">
Morris.Line({
  element: 'nav_chart',
  data: [
    <% new_array.each_with_index do |array, index| %>
        <% if index != new_array_count %>
            {y: '<%= array[:date] %>', a: <%= array[:nav] %>},
        <% else %>
            {y: '<%= array[:date] %>', a: <%= array[:nav] %>}
        <% end %>
    <% end %>
  ],
  xkey: 'y',
  ykeys: ['a'],
  labels: ["Net Asset Value"],
  preUnits: '$',
  numLines: 20,
  ymax: 'auto',
  ymin: 'auto',
  gridTextSize: 20,
  lineWidth: 6,
  pointSize: 7,
  pointWidths: [2],
  hoverOpacity: .8,
  hoverFontSize: 20
});
</script>
